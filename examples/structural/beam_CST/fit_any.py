from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import pickle

from aeropy.geometry.airfoil import CST, rotate
from aeropy.structural.beam import beam_chen
from aeropy.structural.stable_solution import properties, loads
from aeropy.geometry.parametric import CoordinateSystem


def cst(x, A0, A1, A2, A3):
    b.g.D = [A0, A1, A2, A3, 0]
    b.deltaz = 0
    b.length = b.g.arclength(chord=chord)[0]
    b.g.internal_variables(b.length)
    y = b.g.x3(x)
    return y

# def cst(x, A0, A1, A2, A3):
#     b.g.D = [A0, A1, A2, A3, -A0]
#     b.g.internal_variables(b.length)
#     y = b.g.x3(x)
#     return y


plt.figure()

chord = 1
# curved concentrated (initial)
# abaqus_x = [0.0, 0.05263157894736842, 0.10526315789473684, 0.15789473684210525, 0.21052631578947367, 0.2631578947368421, 0.3157894736842105, 0.3684210526315789, 0.42105263157894735, 0.47368421052631576,
#             0.5263157894736842, 0.5789473684210527, 0.631578947368421, 0.6842105263157894, 0.7368421052631579, 0.7894736842105263, 0.8421052631578947, 0.894736842105263, 0.9473684210526315, 1.0]
# abaqus_y = [0.0, 0.0006925207756232686, 0.0027700831024930744, 0.006232686980609418, 0.011080332409972297, 0.017313019390581715, 0.02493074792243767, 0.03393351800554016, 0.04432132963988919, 0.056094182825484756,
#             0.06925207756232686, 0.08379501385041552, 0.09972299168975068, 0.11703601108033237, 0.13573407202216065, 0.15581717451523547, 0.17728531855955676, 0.2001385041551246, 0.22437673130193903, 0.25]

# Ghuku
# chord = 0.4385
# abaqus_x = [0.0, 0.04872222222222222, 0.09744444444444444, 0.14616666666666667, 0.1948888888888889,
#             0.2436111111111111, 0.29233333333333333, 0.34105555555555556, 0.3897777777777778, 0.4385]
# abaqus_y = [0.0, 0.0013268530296639232, 0.0053999397089163235, 0.012358051423148147, 0.022339979557750342,
#             0.03548451549811386, 0.05193045062962963, 0.07181657633768862, 0.09528168400768175, 0.122464565025]
# EB
# abaqus_x = [0.,  0.11111111, 0.22222222, 0.33333333, 0.44444444,
#             0.55555556, 0.66666667, 0.77777778, 0.88888889, 1.]
# abaqus_y = [0., -0.0001019, -0.00039193, -0.00084656, -0.00144229, -
#             0.00215559, -0.00296296, -0.00384088, -0.00476582, -0.00571429]

# EB (distributed)
# abaqus_x = [0.,  0.11111111, 0.22222222, 0.33333333, 0.44444444,
#             0.55555556, 0.66666667, 0.77777778, 0.88888889, 1.]
# abaqus_y = [0.00000000e+00, -4.90996582e-05, -1.82028001e-04, -3.79188713e-04,
#             -6.23598319e-04, -9.00886189e-04, -1.19929453e-03, -1.50967840e-03,
#             -1.82550569e-03, -2.14285714e-03]
# abaqus_x = [-6.143523e-37, 0.049518712, 0.097414128, 0.14182274, 0.18338385, 0.22280164, 0.26078638, 0.29787692, 0.33455449, 0.3694379, 0.40472263, 0.44081238, 0.47817007, 0.51734918,
#             0.55898702, 0.60366577, 0.65133238, 0.70004117, 0.74728715, 0.78860354, 0.82396096, 0.85445607, 0.8812418, 0.90515256, 0.92684138, 0.94658399, 0.96465063, 0.98153377, 0.99782264]
# abaqus_y = [-1.0867065e-36, 0.0069836318, 0.025579287, 0.051580817, 0.08195062, 0.11507001, 0.14982793, 0.18554173, 0.22168092, 0.25601763, 0.2899411, 0.32300428, 0.35462314, 0.38394535,
#             0.40963244, 0.4294889, 0.44009688, 0.43760237, 0.42023277, 0.39134949, 0.35533783, 0.31509525, 0.27228072, 0.22779004, 0.18217251, 0.13567843, 0.088506527, 0.040896866, -0.0069233831]
# # Rao
# abaqus_x = [0, 0.131510417, 0.2109375, 0.294270833, 0.384114583, 0.460286458,
#             0.529947917, 0.598958333, 0.67578125, 0.746744792, 0.815104167, 0.889322917]
# abaqus_y = [0, -0.014878806, -0.03765024, -0.068739984, -0.108779046, -0.149511719, -
#             0.193474559, -0.235286058, -0.281631611, -0.328230469, -0.375198317, -0.422476963]

# abaqus_data = pickle.load(open('neutral_line.p', 'rb'))
# abaqus_x = abaqus_data['coord'][0:401:40, 0]
# abaqus_y = abaqus_data['coord'][0:401:40, 1]

# Airfoil (NACA0012) under 1 N
abaqus_x = [0, 0.0046626413, 0.018402023, 0.048702486, 0.087927498, 0.12745513,
            0.16709827, 0.20679522, 0.24651785, 0.28625035, 0.3259826,
            0.36570814, 0.40542319, 0.44512612, 0.48481697, 0.52449685,
            0.5641672, 0.60382956, 0.64348471, 0.68313259, 0.72277194,
            0.76240051, 0.80201453, 0.84160942, 0.88117975, 0.92072034,
            0.96022779, 0.99970293]
abaqus_y = [0, 0.0080771167, 0.015637144, 0.024132574, 0.030406451,
            0.034420185, 0.037082944, 0.038775206, 0.039692041, 0.039953224,
            0.039647505, 0.038851682, 0.037638135, 0.036076538, 0.034232546,
            0.032165118, 0.029923303, 0.027543247, 0.025045833, 0.022435322,
            0.019699335, 0.016810443, 0.013729585, 0.010411576, 0.0068127746,
            0.0029010926, -0.0013316774, -0.0058551501]
rotated_abaqus = rotate({'x': abaqus_x, 'y': abaqus_y}, normalize=False)
x = np.array(rotated_abaqus['x'])
y = np.array(rotated_abaqus['y'])
# x = abaqus_x
# y = abaqus_y
# [0.1127, 0.1043, 0.0886, 0.1050, 0]

g = CoordinateSystem.CST(D=[0.1127, 0.1043, 0.0886, 0.1050, 0],
                         chord=chord, color='k', N1=.5, N2=1, deltaz=0, tol=None)

s = np.linspace(0, 1, 100)
p = properties()
l = loads()
b = beam_chen(g, p, l, s, ignore_ends=False)
# BRAKE
# Fit
popt, pcov = curve_fit(cst, x, y, p0=[0, 0, 0, 0])
print('Solution: ', popt)
print('Error: ', np.sqrt(np.diag(pcov)))
b.g.D = list(popt)
# b.length = b.g.arclength()[0]
# b.g.internal_variables(b.length)
b.s = np.linspace(0, b.length, 100)
print('c0', b.g.chord)
# b.g.chord = 0.889322917
# print('c1', b.g.chord)
# b.g.deltaz = b.g.D[-1]*b.g.chord
# print('deltaz1', b.g.deltaz, -0.422476963)
b.length = b.g.arclength(b.g.chord)[0]
print('length', b.length, b.g.arclength(b.g.chord))
# b.g.calculate_x1(b.s)
print('s', b.s)
b.g.calculate_x1(b.s)
x_fit = b.g.x1_grid
y_fit = b.g.x3(x_fit)
print('x', x_fit)
print('y', y_fit)
print('c', b.g.chord)
print(b.g.deltaz)
plt.plot(x, y, 'b', label='Raw')
plt.plot(x_fit, y_fit, 'r--', label='Fit')
plt.show()
